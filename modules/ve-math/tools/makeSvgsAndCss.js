#!/usr/bin/env node

/* jshint node: true */

var i, count, group, symbols, symbolObject,
	symbolList = [],
	dirname = '../symbols',
	symbolsFile = '../symbols.json',
	cssFile = '../ve.ui.MWMathSymbols.css',
	fs = require( 'fs' ),
	http = require( 'http' ),
	querystring = require( 'querystring' ),
	md5 = require( 'md5' ),
	SVGO = require( 'svgo' ),
	// svgo --pretty --disable=removeXMLProcInst --disable=cleanupIDs --disable=collapseGroups --disable=convertTransform
	svgo = new SVGO( {
		plugins: [
			{ removeXMLProcInst: false },
			{ cleanupIDs: false },
			{ collapseGroups: false },
			{ convertTransform: false }
		],
		js2svg: { pretty: true }
	} );

// Make the directory for the svgs
if ( !fs.existsSync( dirname ) ) {
	fs.mkdirSync( dirname );
}

fs.readFile( symbolsFile, function ( err, data ) {

	function makeRequest( symbol ) {
		var request,
			data = querystring.stringify( {
				q: symbol
			} ),
			// API call to mathoid
			options = {
				host: 'localhost',
				port: '10042',
				path: '/',
				method: 'POST',
				headers: {
					'Content-Type': 'application/x-www-form-urlencoded',
					'Content-Length': Buffer.byteLength( data )
				}
			};

		// Populate and make the API call
		request = http.request( options, function ( res ) {
			var body = '';
			res.setEncoding( 'utf8' );

			res.on( 'data', function ( data ) {
				body += data;
			} );

			res.on( 'end', function () {
				var classname, filename, svg;
				// Make the classname, replacing any non-alphanumerics with their ASCII order
				classname = symbol.replace( /[^\w]/g, function ( c ) {
					return '_' + c.charCodeAt( 0 );
				} );
				// Make the filename, also adding the path and the extension
				filename = dirname + '/' + md5( symbol ) + '.svg';

				svg = JSON.parse( body ).svg;

				if ( !svg ) {
					console.log( symbol + ' FAILED: ' + body );
					onEnd();
					return;
				}

				svgo.optimize( svg, function ( result ) {
					// Write the svg to the svg file
					fs.writeFile( filename, result.data );
					// write to the css file
					fs.appendFile( cssFile, '\n.' + classname + ' {\n\tbackground-image: url(' + filename + ');\n}\n' );
				} );
				console.log( symbol + ' -> ' + filename );
				onEnd();

			} );
		} );
		request.setTimeout( 10000 );
		request.write( data );
		request.end();
		runNext();
	}

	function onEnd() {
		count--;
		runNext();
	}

	function runNext() {
		if ( count < 1 && symbolList.length ) {
			count++;
			makeRequest( symbolList.shift() );
		}
	}

	symbolObject = JSON.parse( data.toString() );
	for ( group in symbolObject ) {
		symbols = symbolObject[ group ];
		for ( i = 0; i < symbols.length; i++ ) {
			symbolList.push( symbols[ i ].tex );
		}
	}

	fs.writeFile( cssFile, '/*!\n * This file is GENERATED by tools/getSvgsAndCss.js\n * DO NOT EDIT\n */\n' );
	count = 0;
	runNext();

} );
