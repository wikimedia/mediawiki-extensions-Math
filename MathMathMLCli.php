<?php

use \MediaWiki\MediaWikiServices;

/**
 * Created by PhpStorm.
 * User: Moritz
 * Date: 15.08.2017
 * Time: 09:33
 */
class MathMathMLCli extends MathMathML {

	/**
	 * @param array &$tags math tags
	 * @return bool
	 * @throws MWException
	 */
	public static function batchEvaluate( &$tags ) {
		$req = [];
		foreach ( $tags as $key => $tag ) {
			/** @var MathMathMLCli $renderer */
			$renderer = $tag[0];
			// checking if the rendering is in the database is no security issue since only the md5
			// hash of the user input string will be sent to the database
			if ( !$renderer->isInDatabase() ) {
				$req[] = $renderer->getMathoidCliQuery();
			}
		}
		if ( count( $req ) === 0 ) {
			return true;
		}
		$exitCode = 1;
		$res = self::evaluateWithCli( $req, $exitCode );
		foreach ( $tags as $key => $tag ) {
			/** @var MathMathMLCli $renderer */
			$renderer = $tag[0];
			if ( !$renderer->isInDatabase() ) {
				$renderer->initializeFromCliResponse( $res );
			}
		}

		return true;
	}

	/**
	 * @param Object $res
	 * @return bool
	 */
	private function initializeFromCliResponse( $res ) {
		global $wgMathoidCli;
		if ( !property_exists( $res, $this->getMd5() ) ) {
			$this->lastError = "not rendered" . var_export( get_object_vars( $res ), false );

			// TODO error handling
			return false;
		}
		$response = $res->{$this->getMd5()};
		if ( !$response->success ) {
			$this->lastError =
				"not rendered succ" . var_export( get_object_vars( $response ), true );

			// TODO error handling
			return false;
		}
		$this->texSecure = true;
		$this->tex = $response->sanetex;
		// The host name is only relevant for the debugging. So using file:// to indicate that the
		// cli interface seems to be OK.
		$this->processJsonResult( $response, 'file://' . $wgMathoidCli );
		$this->mathStyle = $response->mathoidStyle;
		$this->png = implode( array_map( "chr", $response->png->data ) );
		$this->changed = true;
	}

	/**
	 * @return array
	 */
	public function getMathoidCliQuery() {
		return [
			'query' => [
				'q' => $this->getTex(),
				'type' => $this->getInputType(),
				'hash' => $this->getMd5(),
			],
		];
	}

	/**
	 * @param string $req request
	 * @param int &$exitCode exit code
	 * @return mixed
	 * @throws MWException
	 */
	public static function evaluateWithCli( $req, &$exitCode = null ) {
		global $wgMathoidCli;
		$json_req = json_encode( $req );
		$cmd = MediaWikiServices::getInstance()->getShellCommandFactory()->create();
		$cmd->params( $wgMathoidCli );
		$cmd->input( $json_req );
		$result = $cmd->execute();
		if ( $result->getExitCode() != 0 ) {
			throw new MWException( "Mathoid cli '$wgMathoidCli' is not executable." );
		}
		$res = json_decode( $result->getStdout() );
		if ( !$res ) {
			throw new MWException( "Mathoid cli response '$res' is no valid JSON file." );
		}

		return $res;
	}

	public function render( $forceReRendering = false ) {
		if ( $this->getLastError() ) {
			return false;
		}

		return true;
	}

	protected function doCheck() {
		// avoid that restbase is called if check is set to always
		return $this->texSecure;
	}

	protected function initializeFromDatabaseRow( $rpage ) {
		if ( !empty( $rpage->math_svg ) ) {
			$this->png = $rpage->math_png;
		}
		parent::initializeFromDatabaseRow( $rpage ); // TODO: Change the autogenerated stub
	}

	protected function dbOutArray() {
		$out = parent::dbOutArray();
		$out['math_png'] = $this->png;

		return $out;
	}

	protected function dbInArray() {
		$out = parent::dbInArray();
		$out[] = 'math_png';

		return $out;
	}

	public function getPng() {
		if ( !$this->png ) {
			$this->initializeFromCliResponse( self::evaluateWithCli( [
				$this->getMathoidCliQuery(),
			] ) );

		}

		return parent::getPng();
	}
}
